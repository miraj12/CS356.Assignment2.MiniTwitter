
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 * This is the User's control panel UI  implements TwittObserver and ActionListener
 * @author Miraj
 */
public class UserUI extends javax.swing.JFrame implements ActionListener, TwittObserver {
    
    private User user;
    private DefaultListModel<String> followingList, messageFeedList;
    
    
    /**
     * Creates new form UserUI
     * @param user
     */
    public UserUI(User user) {
        this.user = user;
        followingList = new DefaultListModel<>();
        messageFeedList = new DefaultListModel<>();
        updateList();
        initComponents();
        
        followUser.addActionListener(this);
        postMessage.addActionListener(this);
    }
    
    /**
    *   sets the user frame visible
    */
    public void setVisibility(boolean visible){
        if(visible){
            userId.setText("");
            tweetMessage.setText("");
        }
        setVisible(true);
    }
    /**
    * This method updates the following list and the message feed
    */
    public void updateList(){
        followingList.clear();
        messageFeedList.clear();
        
        for(String s : user.getFollowings()){
            followingList.addElement(s);
        }
        for(String s : user.getMessageFeed()){
            messageFeedList.addElement(s);
        }
    }
    
    /**
    * This method is used to find user by the user id to follow.
    */
    private User findUser(String userId){
        Enumeration<DefaultMutableTreeNode> n = ((DefaultMutableTreeNode) user.getRoot()).depthFirstEnumeration();
        while(n.hasMoreElements()){
            DefaultMutableTreeNode node = n.nextElement();
            if((node instanceof User) && ((User)node).getUserId().equals(userId)){
                return (User)node;
            }
        }
        return null;
    }
    /**
    * This method is used to check if user is already following that user
    */
    private boolean isFollowing(User check){
        if( (check == null) || check.getUserId().equals(user.getUserId()) ){
            return false;
        }
        else{
            for(String s : user.getFollowings()){
                if(check.getUserId().equals(s)){
                    return false;
                }
            }
            return true;
        }
    }
    
    /**
    * This method performs actions when buttons are pressed in the User's 
    * control panel. Allows follow user and post message.
    */
    @Override
    public void actionPerformed(ActionEvent e) {
        switch(e.getActionCommand()){
            case "followUser":
            {
                if(!(userId.getText().equals(""))){
                    User found = findUser(userId.getText());
                    boolean check = isFollowing(found);
                    userId.setText("");
                    if(check){
                        user.addToFollowings(found.getUserId());
                        followingList.addElement(found.getUserId());
                        found.attach(user);
                        found.attach(this);
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "No user found", 
                                    "Error", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Enter user to follow",
                                    "Error", JOptionPane.ERROR_MESSAGE);
                    }
                break;
            }
            
            case "postMessage" :
            {
                if(!tweetMessage.getText().equals("")){
                    user.setCurrentMessage(tweetMessage.getText());
                    user.notifyObserver();
                    tweetMessage.setText("");
                }
                else{
                    JOptionPane.showMessageDialog(null, "Enter message to post."
                                    , "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                break;
            }
        }
    }

    /**
    * This method is used to update the user's message feed when new message is
    * sent.
    */
    @Override
    public void update(TwittSubject subject) {
       if(subject instanceof User){
           messageFeedList.add(0, ((User)subject).getUserId() + ": " + 
                     ((User) subject).getCurrentMessage());
       }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userId = new javax.swing.JTextField();
        followUser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        following = new javax.swing.JList<>(followingList);
        jScrollPane2 = new javax.swing.JScrollPane();
        tweetMessage = new javax.swing.JTextArea();
        postMessage = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        messageFeed = new javax.swing.JList<>(messageFeedList);

        setTitle(user.getUserId() + " panel");

        userId.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        userId.setToolTipText("Follow user");

        followUser.setText("Follow User");
        followUser.setToolTipText("");
        followUser.setActionCommand("followUser");

        following.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        following.setToolTipText("Current Followings");
        jScrollPane1.setViewportView(following);

        tweetMessage.setColumns(20);
        tweetMessage.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        tweetMessage.setLineWrap(true);
        tweetMessage.setRows(5);
        tweetMessage.setToolTipText("Post message");
        jScrollPane2.setViewportView(tweetMessage);

        postMessage.setText("Post Message");
        postMessage.setActionCommand("postMessage");

        messageFeed.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        messageFeed.setToolTipText("Message feed");
        jScrollPane3.setViewportView(messageFeed);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(postMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(userId, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(41, 41, 41)
                            .addComponent(followUser, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userId, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(followUser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton followUser;
    private javax.swing.JList<String> following;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> messageFeed;
    private javax.swing.JButton postMessage;
    private javax.swing.JTextArea tweetMessage;
    private javax.swing.JTextField userId;
    // End of variables declaration//GEN-END:variables

}
